{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"sections":[],"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Structure","title":"Factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"externalID":"s:10FactoryKit0A0V","symbolKind":"struct"},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"],"type":"conformsTo","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a previously cached value from the specified scope.","type":"text"}]},{"text":"Defining a Factory","level":2,"type":"heading","anchor":"Defining-a-Factory"},{"inlineContent":[{"text":"Let’s define a Factory that returns an instance of ","type":"text"},{"code":"ServiceType","type":"codeVoice"},{"text":". To do that we need to extend a Factory ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" and within","type":"text"},{"text":" ","type":"text"},{"text":"that container we define a new computed variable of type ","type":"text"},{"code":"Factory<ServiceType>","type":"codeVoice"},{"text":". The type must be explicitly defined, and is usually a","type":"text"},{"text":" ","type":"text"},{"text":"protocol to which the returned dependency conforms.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with","type":"text"},{"text":" ","type":"text"},{"text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated","type":"text"},{"text":" ","type":"text"},{"text":"(see ","type":"text"},{"code":"callAsFunction()","type":"codeVoice"},{"text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing"},{"text":"Transient","level":2,"type":"heading","anchor":"Transient"},{"inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"type":"text","text":" "},{"type":"text","text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has"},{"type":"text","text":" "},{"type":"text","text":"been served."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/init(_:key:_:)"],"generated":true},{"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/registration"],"generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/preview(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/resolve()"],"generated":true},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/FactoryModifying-Implementations"],"generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/factory"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"references":{"doc://FactoryKit/documentation/FactoryKit/Factory/callAsFunction()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/factorykit\/factory\/callasfunction()","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"type":"topic","title":"callAsFunction()","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory/resolve()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Unsugared resolution function.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/resolve()","url":"\/documentation\/factorykit\/factory\/resolve()","title":"resolve()"},"doc://FactoryKit/documentation/FactoryKit/Factory/preview(factory:)":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/preview(factory:)","role":"symbol","url":"\/documentation\/factorykit\/factory\/preview(factory:)","kind":"symbol","title":"preview(factory:)","abstract":[{"type":"text","text":"Defines a convenience function that allows easy mocking in SwiftUI Previews."}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"preview","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"VoidFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit04VoidA4Typea"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EmptyView","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9EmptyViewV"}]},"doc://FactoryKit/documentation/FactoryKit/Factory":{"url":"\/documentation\/factorykit\/factory","title":"Factory","type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}]},"doc://FactoryKit/documentation/FactoryKit/Factory/register(factory:)":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/register(factory:)","url":"\/documentation\/factorykit\/factory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit04VoidA4Typea","text":"VoidFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"register(factory:)","role":"symbol","abstract":[{"type":"text","text":"Registers a new factory closure capable of producing an object or service of the desired type."}],"type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory/FactoryModifying-Implementations":{"role":"collectionGroup","kind":"article","title":"FactoryModifying Implementations","type":"topic","abstract":[],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/FactoryModifying-Implementations","url":"\/documentation\/factorykit\/factory\/factorymodifying-implementations"},"doc://FactoryKit/documentation/FactoryKit/Factory/registration":{"abstract":[{"type":"text","text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,"},{"type":"text","text":" "},{"type":"text","text":"and others."}],"url":"\/documentation\/factorykit\/factory\/registration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:10FactoryKit0A12RegistrationV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/registration","type":"topic","role":"symbol","title":"registration","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/FactoryKit\/s8SendableP","type":"unresolvable"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Factory/init(_:key:_:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/init(_:key:_:)","url":"\/documentation\/factorykit\/factory\/init(_:key:_:)","title":"init(_:key:_:)","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:10FactoryKit16ManagedContainerP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"VoidFactoryType","preciseIdentifier":"s:10FactoryKit04VoidA4Typea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}]}}}