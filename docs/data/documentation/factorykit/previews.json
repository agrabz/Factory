{"seeAlsoSections":[{"title":"Development and Testing","anchor":"Development-and-Testing","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}]},{"text":"SwiftUI Previews","type":"heading","anchor":"SwiftUI-Previews","level":2},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}]},{"type":"codeListing","code":["\/\/ the view model","class ContentViewModel: ObservableObject {","    @Injected(\\.myService) private var service","    ...","    func load() async {","        let results = await service.load()","        ...","    }","}","","\/\/ the view","struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","\/\/ the preview","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If we can control where and how the view model gets its data then we can put the view model into pretty much any state we choose.","type":"text"}]},{"text":"SwiftUI #Previews","type":"heading","anchor":"SwiftUI-Previews","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15."}]},{"type":"codeListing","code":["#Preview {","    let _ = Container.shared.myService.register { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In fact, this "},{"type":"codeVoice","code":"let _ = Container.shared.xxx.register"},{"type":"text","text":" syntax happens so frequently that Factory 2.5 added some sugar to make it a bit easier."}]},{"type":"codeListing","code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"preview"},{"text":" modifier wraps ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" and also returns an EmptyView, satisfying SwiftUI’s ViewBuilder and eliminating the need for ","type":"text"},{"type":"codeVoice","code":"let _ ="},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Multiple Registrations","anchor":"Multiple-Registrations","type":"heading"},{"inlineContent":[{"text":"There’s also a variant for Containers if you need to do multiple registrations.","type":"text"}],"type":"paragraph"},{"code":["#Preview {","    Container.preview {","        $0.myService.register { MockServiceN(4) }","        $0.anotherService.register { MockAnotherService() }","    }","    ContentView()","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Multiple Previews","anchor":"Multiple-Previews","type":"heading"},{"inlineContent":[{"text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Prior to Xcode 15 and given the ContentView we used above, we’d need to do:","type":"text"}],"type":"paragraph"},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview as each one runs in its own context.."}],"type":"paragraph"},{"code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}","#Preview {","    Container.shared.myService.preview { MockServiceN(0) }","    ContentView()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Since the #Preview macro has been back-ported to iOS 13, there’s really no need to use the old syntax."}],"type":"paragraph"},{"text":"Common Setup","anchor":"Common-Setup","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}],"type":"paragraph"},{"code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","#Preview {","    let _ = Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Or if you want to roll with the cool kids and continue with the preview syntax…","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    func setupMocks() -> EmptyView {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","        return EmptyView()","    }","}","","#Preview {","    Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift","type":"codeListing"}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/previews"]}],"metadata":{"roleHeading":"Article","role":"article","title":"SwiftUI Previews","modules":[{"name":"FactoryKit"}]},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},"references":{"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","type":"topic","role":"article","title":"Testing","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"url":"\/documentation\/factorykit\/swiftui","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","title":"SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"url":"\/documentation\/factorykit\/contexts","title":"Contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"url":"\/documentation\/factorykit\/chains","type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"title":"Circular Dependency Chains","role":"article"}}}