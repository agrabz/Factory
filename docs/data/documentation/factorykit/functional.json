{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"sections":[],"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}],"type":"paragraph"},{"text":"Example","anchor":"Example","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"inlineContent":[{"type":"text","text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now, here’s the view model that uses it."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"text":"Testing","anchor":"Testing","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"inlineContent":[{"text":"Or test specific error cases.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","type":"reference","isActive":true}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/functional"]}],"seeAlsoSections":[{"generated":true,"anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"FactoryKit"}],"title":"Functional Injection"},"references":{"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"type":"link","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}],"title":"Factory and Functional Dependency Injection"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Design":{"role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"kind":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"kind":"article","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","title":"Optionals and Dynamic Registration","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"type":"topic","url":"\/documentation\/factorykit\/optionals"}}}