{"sections":[],"kind":"symbol","topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"],"generated":true},{"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"],"generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"],"generated":true},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"],"generated":true}],"metadata":{"symbolKind":"struct","roleHeading":"Structure","title":"ParameterFactory","externalID":"s:10FactoryKit09ParameterA0V","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"modules":[{"name":"FactoryKit"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"variants":[{"paths":["\/documentation\/factorykit\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}],"type":"paragraph"},{"code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift","type":"codeListing"},{"inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper with ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}],"type":"paragraph"},{"code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}],"type":"paragraph"}]}],"references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/FactoryModifying-Implementations":{"type":"topic","title":"FactoryModifying Implementations","role":"collectionGroup","url":"\/documentation\/factorykit\/parameterfactory\/factorymodifying-implementations","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations","abstract":[],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/init(_:key:_:)":{"url":"\/documentation\/factorykit\/parameterfactory\/init(_:key:_:)","kind":"symbol","title":"init(_:key:_:)","abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit16ManagedContainerP","text":"ManagedContainer"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"role":"symbol","type":"topic"},"doc://FactoryKit/s8SendableP":{"identifier":"doc:\/\/FactoryKit\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/callAsFunction(_:)":{"url":"\/documentation\/factorykit\/parameterfactory\/callasfunction(_:)","kind":"symbol","title":"callAsFunction(_:)","abstract":[{"text":"Resolves a factory capable of taking parameters at runtime.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/preview(factory:)":{"type":"topic","kind":"symbol","title":"preview(factory:)","url":"\/documentation\/factorykit\/parameterfactory\/preview(factory:)","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","abstract":[{"type":"text","text":"Defines a convenience function that allows easy mocking in SwiftUI Previews."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"preview","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9EmptyViewV","text":"EmptyView","kind":"typeIdentifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/registration":{"type":"topic","url":"\/documentation\/factorykit\/parameterfactory\/registration","abstract":[{"text":"Required registration","type":"text"}],"role":"symbol","title":"registration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"registration","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FactoryRegistration","preciseIdentifier":"s:10FactoryKit0A12RegistrationV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/resolve(_:)":{"type":"topic","title":"resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)","url":"\/documentation\/factorykit\/parameterfactory\/resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/register(factory:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","kind":"typeIdentifier","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit09ParameterA0V","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"kind":"symbol","title":"register(factory:)","type":"topic","abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"role":"symbol","url":"\/documentation\/factorykit\/parameterfactory\/register(factory:)","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)"}}}