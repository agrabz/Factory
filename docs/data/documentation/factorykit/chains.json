{"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"variants":[{"paths":["\/documentation\/factorykit\/chains"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging"],"generated":true,"anchor":"Development-and-Testing","title":"Development and Testing"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"metadata":{"title":"Circular Dependency Chains","roleHeading":"Article","role":"article","modules":[{"name":"FactoryKit"}]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Circular Dependency Chain Detection","level":2,"anchor":"Circular-Dependency-Chain-Detection"},{"type":"paragraph","inlineContent":[{"text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examine the following class definitions."}]},{"type":"codeListing","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Attempting make an instance of ","type":"text"},{"type":"codeVoice","code":"CircularA"},{"text":" is going to result in an infinite loop.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a circular dependency chain."}]},{"type":"heading","text":"Resolution","level":2,"anchor":"Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}]},{"type":"codeListing","code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"With the above information in hand we should be able to find the problem and fix it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We could fix things by changing CircularC’s injection wrapper to ","type":"text"},{"code":"LazyInjected","type":"codeVoice"},{"text":" or, better yet, ","type":"text"},{"code":"WeakLazyInjected","type":"codeVoice"},{"text":" in order to avoid a retain cycle.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But a better solution would probably entail finding and breaking out the functionality that ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CircularC","type":"codeVoice"},{"text":" are depending upon into a ","type":"text"},{"inlineContent":[{"text":"third","type":"text"}],"type":"emphasis"},{"text":" object they both could include.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided.","type":"text"}]},{"name":"Important","content":[{"inlineContent":[{"text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"important"},{"level":2,"anchor":"Disabling-CDC-Detection","type":"heading","text":"Disabling CDC Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"syntax":"swift","code":["Container.shared.manager.dependencyChainTestMax = 0"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value for "},{"type":"codeVoice","code":"dependencyChainTestMax"},{"type":"text","text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times."}]},{"type":"paragraph","inlineContent":[{"text":"This value can be increased (or decreased) as needed.","type":"text"}]}]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","type":"topic","url":"\/documentation\/factorykit\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"url":"\/documentation\/factorykit\/contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article","type":"topic","role":"article","title":"Contexts"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"url":"\/documentation\/factorykit\/previews","kind":"article","title":"SwiftUI Previews","type":"topic","role":"article","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","role":"article","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","type":"topic"}}}