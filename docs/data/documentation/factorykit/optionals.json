{"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Let’s take a look."}],"type":"paragraph"},{"anchor":"Dynamic-Registration","type":"heading","level":2,"text":"Dynamic Registration"},{"inlineContent":[{"type":"text","text":"Consider the following optional factory."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}],"type":"paragraph"},{"anchor":"Explicitly-Unwrapped-Optionals","type":"heading","level":2,"text":"Explicitly Unwrapped Optionals"},{"inlineContent":[{"text":"Note that you ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"could","type":"text"}]},{"text":" explicitly unwrap the optional…","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}],"type":"paragraph"},{"inlineContent":[{"text":"I’d advise against it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"text":"removes any cached dependency from its associated scope.","type":"text"}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}],"type":"paragraph"},{"anchor":"Optionals-and-Multiple-Modules","type":"heading","level":2,"text":"Optionals and Multiple Modules"},{"inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},{"text":" for more.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Optionals and Dynamic Registration","role":"article","roleHeading":"Article","modules":[{"name":"FactoryKit"}]},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"seeAlsoSections":[{"anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics","generated":true}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Design":{"role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"kind":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"kind":"article","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","type":"topic","url":"\/documentation\/factorykit\/functional","title":"Functional Injection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article"}}}