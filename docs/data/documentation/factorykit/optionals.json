{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"FactoryKit"}],"title":"Optionals and Dynamic Registration"},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/factorykit\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Let’s take a look."}],"type":"paragraph"},{"text":"Dynamic Registration","level":2,"anchor":"Dynamic-Registration","type":"heading"},{"inlineContent":[{"type":"text","text":"Consider the following optional factory."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}],"type":"paragraph"},{"text":"Explicitly Unwrapped Optionals","level":2,"anchor":"Explicitly-Unwrapped-Optionals","type":"heading"},{"inlineContent":[{"type":"text","text":"Note that you "},{"type":"emphasis","inlineContent":[{"text":"could","type":"text"}]},{"type":"text","text":" explicitly unwrap the optional…"}],"type":"paragraph"},{"syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing"},{"inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"I’d advise against it."}],"type":"paragraph"},{"inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}],"type":"paragraph"},{"text":"Optionals and Multiple Modules","level":2,"anchor":"Optionals-and-Multiple-Modules","type":"heading"},{"inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","isActive":true},{"type":"text","text":" for more."}],"type":"paragraph"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics","generated":true,"anchor":"Advanced-Topics"}],"references":{"doc://FactoryKit/documentation/FactoryKit/Functional":{"url":"\/documentation\/factorykit\/functional","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"title":"Functional Injection"},"doc://FactoryKit/documentation/FactoryKit/Design":{"abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article","title":"Resolution Cycles","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","type":"topic","title":"Tags","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"title":"Factory Modifiers","role":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"kind":"article","url":"\/documentation\/factorykit\/modules","type":"topic","role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"}}}