{"seeAlsoSections":[{"generated":true,"anchor":"The-Basics","title":"The Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"FactoryKit"}],"role":"collectionGroup","title":"Getting Started"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","interfaceLanguage":"swift"},"kind":"article","topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"],"anchor":"Examples","title":"Examples","abstract":[{"text":"Some code samples demonstration various ways to register and resolve Factory’s.","type":"text"}]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},{"type":"text","text":" manages the dependency injection process for a specific object or service and produces an object of the desired type when required."}],"type":"paragraph"},{"type":"heading","text":"Defining a Factory","anchor":"Defining-a-Factory","level":2},{"type":"paragraph","inlineContent":[{"text":"Most container-based dependency injection systems require you to define that a dependency is available for injection and many require some sort of factory or mechanism that will provide a new instance of the service when needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Factory, as you may have guessed from the name, is no exception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a simple registration that creates a "},{"type":"codeVoice","code":"ServiceType"},{"type":"text","text":" dependency for us when needed."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","         self { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s a few things going on here, so let’s break it down."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we extended our container in order to define a new computed variable of type "},{"type":"codeVoice","code":"Factory<ServiceType>"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ServiceType"},{"text":" is the dependency type, and it’s often a protocol to which the returned dependency conforms.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Factory<ServiceType>"},{"text":" is the ","type":"text"},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","isActive":true},{"text":" that controls how and when our ","type":"text"},{"type":"codeVoice","code":"ServiceType"},{"text":" dependency is made. It manages our dependency.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So our computed variable needs to return a Factory. But Factory’s are complex creatures. They need to communicate with their enclosing containers and they need to be provided with a closure that can be called to create an instance of our dependency when required."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As such, a complete, formal Factory definition would look like this…"}]},{"type":"codeListing","syntax":"swift","code":["var service: Factory<ServiceType> {","    Factory(self, scope: .unique) { ","        MyService()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"But we can do better. Factory also provides a bit of syntactic sugar that asks the enclosing container to make our factory for us using a ","type":"text"},{"type":"codeVoice","code":"callAsFunction"},{"text":" function on ","type":"text"},{"type":"codeVoice","code":"self"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var service: Factory<ServiceType> {","    self { MyService() }","}"]},{"type":"paragraph","inlineContent":[{"text":"And we’re done. Either way, the Factory generated by the container is then returned directly to the caller, usually to be evaluated. See “Resolving a Factory” below.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Every time we resolve this particular factory we’ll get a new, unique instance of an object that matches our Factory’s type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers are lightweight and transitory value types. They’re created when needed and then immediately discarded once their purpose has been served.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more examples of Factory definitions that define scopes, use constructor injection, and do parameter passing, see: "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"heading","text":"Resolving a Factory","anchor":"Resolving-a-Factory","level":2},{"type":"paragraph","inlineContent":[{"text":"To resolve a Factory and obtain an object or service of the desired type, one simply calls the Factory as a function. Here we use the ","type":"text"},{"code":"shared","type":"codeVoice"},{"text":" container that’s provided for each and every container type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    private let myService = Container.shared.service()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resolved instance may be brand new or Factory may return a cached value from the specified "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re passing an instance of a container around to your views or view models, just call it directly."}]},{"type":"codeListing","syntax":"swift","code":["private let service = container.service()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, we could have also used an "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" property wrapper and specified a keyPath to the desired dependency. Here’s an example with"},{"type":"text","text":" "},{"type":"text","text":"ObservableObject:"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    @Injected(\\.myService) private var myService","    ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified, the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper looks for dependencies in the standard shared container provided by Factory, so the above is functionally identical to the ","type":"text"},{"code":"Container.shared.service()","type":"codeVoice"},{"text":" example shown earlier. Here’s one pointing to your own container.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, here’s one last example with a class defined using the new Observable macro from iOS 17."}]},{"type":"codeListing","syntax":"swift","code":["@Observable class ContentViewModel {","    @ObservationIgnored","    @Injected(\\.myService) private var myService","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"@ObservationIgnored"},{"type":"text","text":" is required in this case to avoid property wrapper collisions with the backing store provided by "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"For more examples see: ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"},{"text":".","type":"text"}]},{"type":"heading","text":"Registering a new Factory closure","anchor":"Registering-a-new-Factory-closure","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"What happens if we want to change the behavior of a Factory? What if the system requires changes during runtime, or what if we want our factory to provide mocks and testing doubles?"}]},{"type":"paragraph","inlineContent":[{"text":"It’s easy. Just register a new closure with the existing Factory.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["container.service.register {","    MockService()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This new factory registration overrides the original factory closure and then asks the container to clear its associated scope. The next time this factory is resolved Factory will evaluate the new closure and return an instance of the newly registered object instead."}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"This includes singletons, with a few caveats. See the Singleton section in ","type":"text"},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","isActive":true}],"type":"emphasis"}]},{"type":"heading","text":"Mocking and Testing","anchor":"Mocking-and-Testing","level":2},{"type":"paragraph","inlineContent":[{"text":"If we go back and look at our original view model code one might wonder why we’ve gone to all of this trouble? Why not simply say ","type":"text"},{"code":"let myService = MyService()","type":"codeVoice"},{"text":" and be done with it?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or keep the container idea, but write something similar to this…"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    static var myService: MyServiceType { MyService() }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Well, the primary benefit one gains from using a container-based dependency injection system is that we’re able to change the behavior of the system as needed. Consider the following code:"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject var model = ContentViewModel()","    var body: some View {","        Text(model.text())","            .padding()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Our ContentView uses our view model, which is assigned to a StateObject. Great. But now we want to preview our code. How do we change the behavior of "},{"code":"ContentViewModel","type":"codeVoice"},{"type":"text","text":" so that its "},{"code":"MyService","type":"codeVoice"},{"type":"text","text":" dependency isn’t making live API calls during development?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s easy. Just replace "},{"type":"codeVoice","code":"MyService"},{"type":"text","text":" with a mock that also conforms to "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockService2() }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the line in our preview code where we’re gone back to our container and registered a new closure on our factory. This function overrides the default factory closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when our preview is displayed "},{"type":"codeVoice","code":"ContentView"},{"type":"text","text":" creates a "},{"type":"codeVoice","code":"ContentViewModel"},{"type":"text","text":" which in turn has a dependency on "},{"type":"codeVoice","code":"myService"},{"type":"text","text":" using shared container."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And when the wrapper asks the factory for an instance of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" it now gets a "},{"type":"codeVoice","code":"MockService2"},{"type":"text","text":" instead of the "},{"type":"codeVoice","code":"MyService"},{"type":"text","text":" type originally defined."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a powerful concept that lets us reach deep into a chain of dependencies and alter the behavior of a system as needed."}]},{"type":"paragraph","inlineContent":[{"text":"We’re just scratching the surface here. Read more in the section on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},{"text":".","type":"text"}]},{"type":"heading","text":"Contexts","anchor":"Contexts","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One powerful new feature in Factory 2.1 is contexts. Let’s say that for logistical reasons whenever your application runs in debug mode you never want it to make calls to your application’s analytics engine."}]},{"type":"paragraph","inlineContent":[{"text":"Factory makes it easy. Just register an override for that particular context.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["container.analytics.onDebug {","    StubAnalyticsEngine()","}"]},{"type":"paragraph","inlineContent":[{"text":"There are many contexts for testing, previews, and even UITesting. See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},{"text":" for more.","type":"text"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factorykit\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"title":"Sample Resolutions","kind":"article","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"type":"topic","role":"article","url":"\/documentation\/factorykit\/resolutions","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"url":"\/documentation\/factorykit\/registrations","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","role":"article","title":"Sample Registrations","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"url":"\/documentation\/factorykit\/containers","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","role":"article","title":"Containers","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"url":"\/documentation\/factorykit\/factory","title":"Factory","type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}]},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"url":"\/documentation\/factorykit\/contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article","type":"topic","role":"article","title":"Contexts"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"role":"collectionGroup","url":"\/documentation\/factorykit\/scopes","title":"Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","role":"article","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},"doc://FactoryKit/documentation/FactoryKit/Scope":{"navigatorTitle":[{"kind":"identifier","text":"Scope"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/factorykit\/scope","type":"topic","role":"symbol","title":"Scope","kind":"symbol","abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Singleton"},{"type":"text","text":", "},{"code":"Cached","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Graph","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Shared","type":"codeVoice"},{"text":".","type":"text"}]}}}