{"abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"variants":[{"paths":["\/documentation\/factorykit\/contexts"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"generated":true,"anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current ","type":"text"},{"inlineContent":[{"text":"context","type":"text"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, you "},{"type":"strong","inlineContent":[{"text":"never","type":"text"}]},{"type":"text","text":" want your application’s analytics library to be called when running unit tests?"}]},{"type":"paragraph","inlineContent":[{"text":"Piece of cake. Just register a new override for that particular context.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes it easy."}]},{"text":"Contexts","level":2,"type":"heading","anchor":"Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg(String)"}]},{"text":" - application is launched with a particular argument.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"args([String])","type":"text"}],"type":"strong"},{"text":" - application is launched with one of several arguments.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"preview","type":"text"}]},{"type":"text","text":" - application is running in Xcode Preview mode"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"test","type":"text"}],"type":"strong"},{"text":" - application is running in Xcode Unit Test mode","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"debug","type":"text"}],"type":"strong"},{"text":" - application is running in Xcode DEBUG mode","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"simulator"}]},{"type":"text","text":" - application is running within an Xcode simulator"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]},{"text":" - application is running on an actual device","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"text":"Some Examples","level":2,"type":"heading","anchor":"Some-Examples"},{"level":3,"text":"• onTest","anchor":"-onTest","type":"heading"},{"inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}],"type":"paragraph"},{"code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"There’s also a shortcut version:","type":"text"}],"type":"paragraph"},{"code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}],"type":"paragraph"},{"code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using onTest is much easier."}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow.","type":"text"}]}],"type":"paragraph"},{"level":3,"text":"• onPreview","anchor":"-onPreview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}]},{"type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can, of course, still use the mechanisms shown in "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","type":"reference","isActive":true},{"type":"text","text":"."}]},{"anchor":"-onDebug","type":"heading","text":"• onDebug","level":3},{"type":"paragraph","inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"That there’s no ","type":"text"},{"code":"release","type":"codeVoice"},{"text":" context. Just use the standard ","type":"text"},{"code":"register","type":"codeVoice"},{"text":" syntax in that case.","type":"text"}],"type":"paragraph"}],"style":"note"},{"anchor":"-onSimulator--onDevice","type":"heading","text":"•  onSimulator \/ onDevice","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds."}]},{"anchor":"-onArg","type":"heading","text":"• onArg","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown in the "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","type":"reference","isActive":true},{"type":"text","text":" section the test case itself is pretty standard."}]},{"type":"codeListing","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change.","type":"text"}]},{"type":"codeListing","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"syntax":"swift"},{"anchor":"-onArgs","type":"heading","text":"• onArgs","level":3},{"type":"paragraph","inlineContent":[{"text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed.","type":"text"}]},{"type":"codeListing","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"syntax":"swift"},{"anchor":"Runtime-Arguments","type":"heading","text":"Runtime Arguments","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}]},{"type":"codeListing","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"],"syntax":"swift"},{"anchor":"Multiple-Contexts","type":"heading","text":"Multiple Contexts","level":2},{"type":"paragraph","inlineContent":[{"text":"As you may have noticed above in the ","type":"text"},{"code":"arg","type":"codeVoice"},{"text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of specifying separate services depending on context.","type":"text"}]},{"type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}]},{"type":"codeListing","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Which brings us to…","type":"text"}]},{"anchor":"Context-Precedence","type":"heading","text":"Context Precedence","level":2},{"type":"paragraph","inlineContent":[{"text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"arg[s]","type":"text"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" *"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"test","type":"text"}]},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"registered factory"}],"type":"strong"},{"type":"text","text":" (if any)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"original factory","type":"text"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds."}]},{"anchor":"Global-Context","type":"heading","text":"Global Context","level":2},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"onArg"},{"type":"text","text":" and "},{"type":"codeVoice","code":"onDebug"},{"type":"text","text":" and other context modifiers basically define how the app should respond to that particular context."}]},{"anchor":"Changing-a-Context","type":"heading","text":"Changing a Context","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to "},{"type":"strong","inlineContent":[{"type":"text","text":"manually"}]},{"type":"text","text":" clear the scope cache for that object."}]},{"type":"codeListing","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"syntax":"swift"},{"name":"Warning","type":"aside","content":[{"inlineContent":[{"type":"text","text":"With "},{"type":"codeVoice","code":"reset"},{"type":"text","text":" make sure you specify that you only want to clear the scope. Calling "},{"type":"codeVoice","code":"reset"},{"type":"text","text":" without a parameter clears everything, including contexts like the one you just set!"}],"type":"paragraph"}],"style":"warning"},{"type":"paragraph","inlineContent":[{"text":"See the section on ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"The Factory Wins","type":"text"}]},{"text":" in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","isActive":true,"type":"reference"},{"text":" for more information on this and other scenarios.","type":"text"}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"FactoryKit"}],"title":"Contexts"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"url":"\/documentation\/factorykit\/chains","role":"article","title":"Circular Dependency Chains","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"title":"Factory Modifiers","role":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","type":"topic","url":"\/documentation\/factorykit\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"url":"\/documentation\/factorykit\/previews","kind":"article","title":"SwiftUI Previews","type":"topic","role":"article","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","role":"article","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"}}}