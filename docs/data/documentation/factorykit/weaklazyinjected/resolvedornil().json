{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/factorykit\/weaklazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"metadata":{"title":"resolvedOrNil()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"role":"symbol","externalID":"s:10FactoryKit16WeakLazyInjectedV13resolvedOrNilxSgyF","symbolKind":"method","modules":[{"name":"FactoryKit"}],"roleHeading":"Instance Method"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve","type":"text"},{"text":" ","type":"text"},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected\/resolvedOrNil()"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]]},"kind":"symbol","sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected/resolvedOrNil()":{"kind":"symbol","abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected\/resolvedOrNil()","role":"symbol","type":"topic","title":"resolvedOrNil()","url":"\/documentation\/factorykit\/weaklazyinjected\/resolvedornil()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factorykit\/weaklazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"topic","kind":"symbol","title":"WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}]}}}