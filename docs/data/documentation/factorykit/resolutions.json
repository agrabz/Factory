{"sections":[],"kind":"article","identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","interfaceLanguage":"swift"},"metadata":{"role":"article","roleHeading":"Article","title":"Sample Resolutions","modules":[{"name":"FactoryKit"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"generated":true,"anchor":"Examples","title":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"]}],"variants":[{"paths":["\/documentation\/factorykit\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"primaryContentSections":[{"content":[{"text":"Shared Class Container","type":"heading","level":3,"anchor":"Shared-Class-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}]},{"syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"text":"Initialization from Passed Container","type":"heading","level":3,"anchor":"Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}]},{"syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"type":"codeListing"},{"text":"Lazy Initialization from Passed Container","type":"heading","level":3,"anchor":"Lazy-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}]},{"syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"],"type":"codeListing"},{"text":"Injected Property Wrappers","type":"heading","level":3,"anchor":"Injected-Property-Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"type":"codeVoice","code":"EnvironmentObject"},{"type":"text","text":" in SwiftUI."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject"},{"text":" for more.","type":"text"}]},{"type":"heading","text":"Global Keypath Resolution from Shared Container","anchor":"Global-Keypath-Resolution-from-Shared-Container","level":3},{"type":"paragraph","inlineContent":[{"text":"Factory provides two global functions that utilize keypaths for resolution.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"type":"heading","text":"Parameterized Initialization from Passed Container","anchor":"Parameterized-Initialization-from-Passed-Container","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference","isActive":true},{"type":"text","text":" for more details."}]},{"type":"heading","text":"Classic Factory from Static Class Member","anchor":"Classic-Factory-from-Static-Class-Member","level":3},{"type":"paragraph","inlineContent":[{"text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"}]},{"type":"heading","text":"Composition Root","anchor":"Composition-Root","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"references":{"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","role":"symbol","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"url":"\/documentation\/factorykit\/injectedobject"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article","title":"Getting Started"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"type":"topic","kind":"symbol","title":"Injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"url":"\/documentation\/factorykit\/injected"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"role":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"title":"DynamicInjected","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"title":"Sample Registrations","type":"topic","url":"\/documentation\/factorykit\/registrations","kind":"article","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","title":"LazyInjected","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factorykit\/lazyinjected","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"}}}