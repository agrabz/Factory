{"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"seeAlsoSections":[{"generated":true,"title":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"],"anchor":"Examples"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Resolutions","role":"article","modules":[{"name":"FactoryKit"}]},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"level":3,"anchor":"Shared-Class-Container","type":"heading","text":"Shared Class Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is the classic Service Locator pattern updated for Factory 2.0.","type":"text"}]},{"level":3,"anchor":"Initialization-from-Passed-Container","type":"heading","text":"Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"syntax":"swift"},{"level":3,"anchor":"Lazy-Initialization-from-Passed-Container","type":"heading","text":"Lazy Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"],"syntax":"swift"},{"level":3,"anchor":"Injected-Property-Wrappers","type":"heading","text":"Injected Property Wrappers"},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"code":"EnvironmentObject","type":"codeVoice"},{"text":" in SwiftUI.","type":"text"}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","type":"reference"},{"text":" for more.","type":"text"}]},{"level":3,"anchor":"Global-Keypath-Resolution-from-Shared-Container","type":"heading","text":"Global Keypath Resolution from Shared Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"level":3,"anchor":"Parameterized-Initialization-from-Passed-Container","type":"heading","text":"Parameterized Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","isActive":true},{"type":"text","text":" for more details."}]},{"level":3,"anchor":"Classic-Factory-from-Static-Class-Member","type":"heading","text":"Classic Factory from Static Class Member"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This was discussed in greater detail in "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"reference","isActive":true}]},{"level":3,"anchor":"Composition-Root","type":"heading","text":"Composition Root"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor."}]},{"type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"],"syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/resolutions"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"type":"topic","title":"Getting Started","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","url":"\/documentation\/factorykit\/gettingstarted","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"url":"\/documentation\/factorykit\/registrations","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","role":"article","title":"Sample Registrations","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","url":"\/documentation\/factorykit\/injected","title":"Injected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factorykit\/weaklazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"topic","kind":"symbol","title":"WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}]},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/dynamicinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","url":"\/documentation\/factorykit\/injectedobject","title":"InjectedObject","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}]}}}