{"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"sections":[],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"seeAlsoSections":[{"title":"Examples","generated":true,"anchor":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"]}],"primaryContentSections":[{"content":[{"anchor":"Basic","level":3,"type":"heading","text":"Basic"},{"inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This registered dependency returns a new, unique version of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We prefer the more concise version, and that’s what we’ll use going forward.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The container helper functions are "},{"code":"@inlinable","type":"codeVoice"},{"type":"text","text":" and as such there’s no performance penalty incurred when calling them."}]}],"style":"note"},{"anchor":"Scopes","level":3,"type":"heading","text":"Scopes"},{"inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}],"type":"paragraph"},{"code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Constructor Injection","anchor":"Constructor-Injection"},{"type":"paragraph","inlineContent":[{"text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Parameters","anchor":"Parameters"},{"type":"paragraph","inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference","isActive":true},{"text":".","type":"text"}]},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we also needed to specify the type of our parameter."}]},{"anchor":"Same-Types","text":"Same Types","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Example of correctly handling multiple instances of the same type.","type":"text"}]},{"code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Inside-Custom-Containers","text":"Inside Custom Containers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve seen factory registrations done within container "},{"type":"emphasis","inlineContent":[{"text":"extensions","type":"text"}]},{"type":"text","text":", but it should also be noted that we can also create them within our own custom containers."}]},{"code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note the last “lazy” definition of ","type":"text"},{"code":"service2","type":"codeVoice"},{"text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}]},{"content":[{"inlineContent":[{"text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle.","type":"text"}],"type":"paragraph"}],"name":"Warning","type":"aside","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}]},{"anchor":"Static-Factorys","text":"Static Factory’s","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Example of a static Factory 2.0 registration container.","type":"text"}]},{"code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While you ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"can","type":"text"}]},{"text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","isActive":true,"type":"reference"},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}]},{"code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factorykit\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"FactoryKit"}],"title":"Sample Registrations","roleHeading":"Article","role":"article"},"references":{"doc://FactoryKit/documentation/FactoryKit/Injected":{"type":"topic","kind":"symbol","title":"Injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"url":"\/documentation\/factorykit\/injected"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"role":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article","title":"Getting Started"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"type":"topic","role":"article","kind":"article","url":"\/documentation\/factorykit\/resolutions","title":"Sample Resolutions"}}}