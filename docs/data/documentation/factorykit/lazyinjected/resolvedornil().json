{"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper instance if it hasn’t already been resolved."}],"type":"paragraph"},{"syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/factorykit\/lazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"]]},"kind":"symbol","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"resolvedOrNil()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"symbolKind":"method","role":"symbol","modules":[{"name":"FactoryKit"}],"externalID":"s:10FactoryKit12LazyInjectedV13resolvedOrNilxSgyF"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/LazyInjected/resolvedOrNil()":{"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/factorykit\/lazyinjected\/resolvedornil()","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected\/resolvedOrNil()","title":"resolvedOrNil()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}]},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"}}}