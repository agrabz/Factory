{"metadata":{"modules":[{"name":"FactoryKit"}],"title":"FactoryKit","externalID":"FactoryKit","role":"collection","symbolKind":"module","roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}],"type":"paragraph"},{"inlineContent":[{"text":"Factory is…","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Adaptable","type":"text"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Performant","type":"text"}]},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concise"}],"type":"strong"},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Flexible"}],"type":"strong"},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Lightweight","type":"text"}]},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Free"}],"type":"strong"},{"text":": Factory is free and open source under the MIT License.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"],"anchor":"The-Basics","title":"The Basics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"anchor":"Development-and-Testing","title":"Development and Testing"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"],"anchor":"Additional-Topics","title":"Additional Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"],"anchor":"Classes","generated":true,"title":"Classes"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"],"anchor":"Protocols","generated":true,"title":"Protocols"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"],"anchor":"Structures","generated":true,"title":"Structures"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"],"anchor":"Functions","generated":true,"title":"Functions"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"],"anchor":"Type-Aliases","generated":true,"title":"Type Aliases"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"],"anchor":"Enumerations","generated":true,"title":"Enumerations"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/factorykit"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","type":"topic","url":"\/documentation\/factorykit\/optionals","role":"article","title":"Optionals and Dynamic Registration","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"role":"collectionGroup","url":"\/documentation\/factorykit\/scopes","title":"Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"url":"\/documentation\/factorykit\/contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article","type":"topic","role":"article","title":"Contexts"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","role":"article","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve(_:)","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","kind":"symbol","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","url":"\/documentation\/factorykit\/injected","title":"Injected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryRegistration"}],"type":"topic","url":"\/documentation\/factorykit\/factoryregistration","title":"FactoryRegistration","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","type":"topic","url":"\/documentation\/factorykit\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"title":"Debugging","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Container":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"url":"\/documentation\/factorykit\/container","title":"Container","type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Container"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","url":"\/documentation\/factorykit\/injectedobject","title":"InjectedObject","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factorykit\/weaklazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"topic","kind":"symbol","title":"WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"url":"\/documentation\/factorykit\/functional","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"title":"Functional Injection"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/factorycontext","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"title":"FactoryContext","type":"topic","abstract":[]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"url":"\/documentation\/factorykit\/resolve(_:)-22zpa","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit9ContainerC","text":"Container"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve(_:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"navigatorTitle":[{"text":"ParameterFactoryType","kind":"identifier"}],"abstract":[],"url":"\/documentation\/factorykit\/parameterfactorytype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","role":"symbol","kind":"symbol","type":"topic","title":"ParameterFactoryType","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactoryType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Migration":{"abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","type":"topic","url":"\/documentation\/factorykit\/migration","title":"Migration","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"role":"symbol","navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"title":"FactoryContextType","url":"\/documentation\/factorykit\/factorycontexttype"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"url":"\/documentation\/factorykit\/resolving","navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"role":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"type":"topic","kind":"symbol","title":"Resolving"},"doc://FactoryKit/documentation/FactoryKit":{"role":"collection","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"kind":"symbol","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedType","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"InjectedType","kind":"identifier"}],"abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"title":"InjectedType","role":"symbol","url":"\/documentation\/factorykit\/injectedtype"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","type":"topic","title":"Tags","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/dynamicinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Design":{"abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","kind":"article","role":"article"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","title":"ManagedContainer","role":"symbol","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"kind":"symbol","url":"\/documentation\/factorykit\/managedcontainer","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"kind":"symbol","role":"symbol","title":"VoidFactoryType","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}],"url":"\/documentation\/factorykit\/voidfactorytype","abstract":[]},"doc://FactoryKit/documentation/FactoryKit/Containers":{"url":"\/documentation\/factorykit\/containers","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","role":"article","title":"Containers","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"title":"AutoRegistering","navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"url":"\/documentation\/factorykit\/autoregistering","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"url":"\/documentation\/factorykit\/previews","kind":"article","title":"SwiftUI Previews","type":"topic","role":"article","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article","title":"Resolution Cycles","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","role":"article"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factorykit\/sharedcontainer","type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"kind":"symbol","title":"SharedContainer"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"url":"\/documentation\/factorykit\/injectedobservable","title":"InjectedObservable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObservable"}],"type":"topic","abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}]},"doc://FactoryKit/documentation/FactoryKit/Factory":{"url":"\/documentation\/factorykit\/factory","title":"Factory","type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"title":"Factory Modifiers","role":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"title":"FactoryResetOptions","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"url":"\/documentation\/factorykit\/factoryresetoptions","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"url":"\/documentation\/factorykit\/chains","role":"article","title":"Circular Dependency Chains","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"type":"topic","title":"Getting Started","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","url":"\/documentation\/factorykit\/gettingstarted","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","type":"topic","kind":"symbol","title":"ContainerManager","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"role":"symbol","url":"\/documentation\/factorykit\/containermanager"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"kind":"article","url":"\/documentation\/factorykit\/modules","type":"topic","role":"article"}}}