{"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Adaptable","type":"text"}],"type":"strong"},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Performant"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Concise","type":"text"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Flexible"}],"type":"strong"},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Tested","type":"text"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"roleHeading":"Framework","role":"collection","title":"FactoryKit","symbolKind":"module","externalID":"FactoryKit","modules":[{"name":"FactoryKit"}]},"kind":"symbol","topicSections":[{"title":"The Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"],"anchor":"The-Basics"},{"title":"Development and Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"anchor":"Development-and-Testing"},{"title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics"},{"title":"Additional Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"],"anchor":"Additional-Topics"},{"title":"Classes","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"],"generated":true,"anchor":"Classes"},{"title":"Protocols","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"],"generated":true,"anchor":"Protocols"},{"title":"Structures","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"],"generated":true,"anchor":"Structures"},{"title":"Functions","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"],"generated":true,"anchor":"Functions"},{"title":"Type Aliases","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"],"generated":true,"anchor":"Type-Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"],"generated":true,"anchor":"Enumerations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/resolve(_:)-22zpa","role":"symbol","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:10FactoryKit9ContainerC","text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"url":"\/documentation\/factorykit\/contexts","title":"Contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"abstract":[],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/factorycontext","title":"FactoryContext"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","title":"Optionals and Dynamic Registration","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"type":"topic","url":"\/documentation\/factorykit\/optionals"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","type":"topic","url":"\/documentation\/factorykit\/functional","title":"Functional Injection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"url":"\/documentation\/factorykit\/swiftui","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","title":"SwiftUI","abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"kind":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"kind":"symbol","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","role":"symbol","type":"topic","url":"\/documentation\/factorykit\/containermanager","title":"ContainerManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"role":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"url":"\/documentation\/factorykit\/resolve(_:)-1v66f","abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"role":"symbol","type":"topic","title":"resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","role":"symbol","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"title":"FactoryRegistration","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"url":"\/documentation\/factorykit\/factoryregistration"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"kind":"symbol","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContextType"}],"type":"topic","url":"\/documentation\/factorykit\/factorycontexttype","title":"FactoryContextType","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","url":"\/documentation\/factorykit\/sharedcontainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","title":"SharedContainer","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"type":"topic","title":"ManagedContainer","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","url":"\/documentation\/factorykit\/managedcontainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"role":"article","title":"Containers","type":"topic","kind":"article","url":"\/documentation\/factorykit\/containers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","role":"symbol","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"url":"\/documentation\/factorykit\/injectedobject"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"type":"topic","kind":"symbol","title":"Injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"url":"\/documentation\/factorykit\/injected"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"type":"topic","role":"symbol","abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/factorykit\/autoregistering","title":"AutoRegistering","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"type":"topic","kind":"article","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Container":{"abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/container","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"role":"symbol","title":"Container"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","type":"topic","title":"Scopes","role":"collectionGroup","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"url":"\/documentation\/factorykit\/scopes"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/previews","title":"SwiftUI Previews"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","title":"LazyInjected","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factorykit\/lazyinjected","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"url":"\/documentation\/factorykit\/chains","type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"title":"Circular Dependency Chains","role":"article"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","url":"\/documentation\/factorykit\/parameterfactorytype","title":"ParameterFactoryType","navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Design":{"role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"kind":"article","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"url":"\/documentation\/factorykit\/factorymodifying","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","title":"FactoryModifying","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"type":"topic","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/voidfactorytype","abstract":[],"navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","title":"VoidFactoryType","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","type":"topic","role":"article","title":"Testing","kind":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedType","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/injectedtype","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"title":"InjectedType","kind":"symbol","navigatorTitle":[{"text":"InjectedType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"title":"Resolving","navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/resolving"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"url":"\/documentation\/factorykit","title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"title":"DynamicInjected","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Migration":{"type":"topic","title":"Migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","kind":"article","role":"article","url":"\/documentation\/factorykit\/migration"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"kind":"symbol","url":"\/documentation\/factorykit\/factory","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","type":"topic","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"title":"Factory"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","url":"\/documentation\/factorykit\/injectedobservable","title":"InjectedObservable","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article","title":"Getting Started"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factorykit\/factoryresetoptions","kind":"symbol","title":"FactoryResetOptions","role":"symbol","type":"topic"}}}